# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:18-alpine
stages: 
  - test
  - versioning         # List of stages for jobs, and their order of execution
  - build
  - deploy

.before_script:
 - yarn install --frozen-lockfile
build-job-versioning:
  stage: versioning
  script:
    - git clone http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/sweetmustard/internal/research-projects/mobile-ci_cd.git
    - git checkout development
    - yarn version  --prerelease --preid dev
    - git config --global user.name "jeroen37"
    - git config --global user.email "jeroen.crevits@sweetmustard.be"
    - git add --all
    - git commit -m "GitLab Runner Push"
    - git push http://jeroen37:glpat-Cvwr3_Jv1R8-3LSgUJ5q@gitlab.com/sweetmustard/internal/research-projects/mobile-ci_cd.git development
    - cd ..
    

.build-job-development:       # This job runs in the build stage, which runs first.
  stage: build
  when: manual
  script:
    - npm install --global appcenter-cli
    - echo "$APPCENTER_API_TOKEN"
    - echo "$APPCENTER_APP_NAME"
    - echo "$CI_COMMIT_BRANCH"
    - appcenter build queue -b $CI_COMMIT_BRANCH --token $APPCENTER_API_TOKEN --app $APPCENTER_APP_NAME
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "development")
.build-job-staging:       # This job runs in the build stage, which runs first.
  stage: build
  when: manual
  script:
    - npm install --global appcenter-cli
    - echo "$APPCENTER_API_TOKEN"
    - echo "$APPCENTER_APP_NAME"
    - echo "$CI_COMMIT_BRANCH"
    - appcenter build queue -b $CI_COMMIT_BRANCH --token $APPCENTER_API_TOKEN --app $APPCENTER_APP_NAME
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "development")

.build-job-production:       # This job runs in the build stage, which runs first.
  stage: build
  when: manual
  script:
    - npm install --global appcenter-cli
    - echo "$APPCENTER_API_TOKEN"
    - echo "$APPCENTER_APP_NAME"
    - echo "$CI_COMMIT_BRANCH"
    - appcenter build queue -b $CI_COMMIT_BRANCH --token $APPCENTER_API_TOKEN --app $APPCENTER_APP_NAME
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "development")

.unit-test-job: 
    # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - yarn test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "development")
      when: always
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    paths:
      - coverage/cobertura-coverage.xml
      - junit.xml
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

.lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - yarn lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "development")
      when: always